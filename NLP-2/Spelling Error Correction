{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMG6npsenpX6usDO0pUdbox"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"egP8RqbGrqcd","colab":{"base_uri":"https://localhost:8080/","height":344},"executionInfo":{"status":"error","timestamp":1675346660716,"user_tz":-180,"elapsed":4977,"user":{"displayName":"Anzel Öztürk","userId":"10664790102109257594"}},"outputId":"da2c3c45-f5c0-404c-b87f-c1e0c5f0bc24"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"error","ename":"MessageError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mMessageError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-d5df0069828e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, readonly)\u001b[0m\n\u001b[1;32m     99\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m120000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreadonly\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m   \u001b[0;34m\"\"\"Mount your Google Drive at the specified mountpoint path.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 101\u001b[0;31m   return _mount(\n\u001b[0m\u001b[1;32m    102\u001b[0m       \u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m       \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_remount\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36m_mount\u001b[0;34m(mountpoint, force_remount, timeout_ms, ephemeral, readonly)\u001b[0m\n\u001b[1;32m    122\u001b[0m       'TBE_EPHEM_CREDS_ADDR'] if ephemeral else _os.environ['TBE_CREDS_ADDR']\n\u001b[1;32m    123\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mephemeral\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m     _message.blocking_request(\n\u001b[0m\u001b[1;32m    125\u001b[0m         'request_auth', request={'authType': 'dfs_ephemeral'}, timeout_sec=None)\n\u001b[1;32m    126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mblocking_request\u001b[0;34m(request_type, request, timeout_sec, parent)\u001b[0m\n\u001b[1;32m    169\u001b[0m   request_id = send_request(\n\u001b[1;32m    170\u001b[0m       request_type, request, parent=parent, expect_reply=True)\n\u001b[0;32m--> 171\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m    100\u001b[0m         reply.get('colab_msg_id') == message_id):\n\u001b[1;32m    101\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;34m'error'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mMessageError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mMessageError\u001b[0m: Error: credential propagation was unsuccessful"]}]},{"cell_type":"code","metadata":{"id":"KtwqCCPiub6F"},"source":["#corpus_path='/content/drive/My Drive/NLP-2/corpus.txt'\n","uncorrect_words_path='/content/drive/My Drive/NLP-2/test-words-misspelled.txt'\n","correct_words_path='/content/drive/My Drive/NLP-2/test-words-correct.txt'\n","\n","words=[]\n","uncorrectwords=[]\n","with open(correct_words_path ) as file:\n","  for line in file:\n","    for word in line.lower().split():\n","      words.append(word)\n","\n","with open(uncorrect_words_path ) as file:\n","  for x in file:\n","    for word in x.lower().split():\n","      uncorrectwords.append(word)      \n","print(words)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JqDCcb-7q7bh"},"source":["import re  \n","def frequency(x):  #finding frequencies of strings\n","  frequency = {}\n","  match_pattern = re.findall(r'\\b[a-z]{1,20}\\b', str(x))\n","  for w in match_pattern:\n","    count = frequency.get(w, 0)\n","    frequency[w] = count + 1\n","  return frequency"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bACCRzeRq94f"},"source":["frequency(words)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k4Wop0blXBdc"},"source":["import numpy as np \n","def edit_min_distance(first_word,second_word):\n"," \n","  target_list = []\n","  for x in first_word:\n","    target_list.append(x)\n","  #print(target_list)\n","  \n","  source_list=[]\n","  for y in second_word:\n","    source_list.append(y)\n","  #print(source_list)\n","\n","  matrix = np.zeros((len(second_word) , len(first_word)))\n","\n","  matrix[0]=[j for j in range(len(first_word))]\n","  matrix[:,0]=[j for j in range(len(second_word))]\n","  \n","\n","  if target_list[1] != source_list[1]:\n","    matrix[1,1] = 2\n","\n","  for c in range(1,len(first_word)):\n","    for r in range(1,len(second_word)):\n","      if target_list[c] != source_list[r]:\n","        matrix[r,c] = min(matrix[r-1,c] , matrix[r,c-1])+1\n","       \n","      else:\n","        matrix[r,c]=matrix[r-1,c-1]\n","  #return matrix\n","  return int(matrix[r][c])\n"," \n"," "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sYWmJJxfrG9B"},"source":["edit_min_distance('anzel','anzek')#for example"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SvAhLTx6rItn"},"source":["i=0\n","j=0\n","count=0\n","countx=0\n","for j in uncorrectwords: \n","  for i in words:\n","    if edit_min_distance(i,j)==0 :\n","      count=1\n","    elif edit_min_distance(i,j)==1 :         \n","      count=2\n","      newcorrect=i\n","      \n","    elif edit_min_distance(i,j)==2:     \n","      count=3\n","      new1correct=i  \n","\n","  if count==1:\n","    print(j+'  is correctly spelled')\n","    countx+=1\n","  elif count==2:\n","    print('correct spelling of '+j+' is = '+newcorrect)\n","  elif count==3:\n","    print('correct spelling of '+j+' is = '+new1correct)\n","  else :\n","    print('       ')\n","print(countx)"],"execution_count":null,"outputs":[]}]}